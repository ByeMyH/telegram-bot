package main

import (
    "encoding/json"
    "fmt"
    "log"
    "net/http"
    "strconv"
    "strings"

    "gopkg.in/telebot.v3"
)

type ExchangeResponse struct {
    Amount float64            `json:"amount"`
    Base   string             `json:"base"`
    Rates  map[string]float64 `json:"rates"`
}

func main() {
    bot, err := telebot.NewBot(telebot.Settings{
        Token: "7781307048:AAE_Vi4ro4o_b3ZUx2HEE9VNEfnDHc3hsaQ",
    })
    if err != nil {
        log.Fatal(err)
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    bot.Handle("/start", func(c telebot.Context) error {
        return c.Send("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç. ü§ë\n\n" +
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n/convert <—Å—É–º–º–∞> <–∏–∑ –≤–∞–ª—é—Ç—ã> to <–≤ –≤–∞–ª—é—Ç—É>\n" +
            "–ü—Ä–∏–º–µ—Ä: /convert 100 USD to EUR")
    })

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /convert
    bot.Handle("/convert", func(c telebot.Context) error {
        args := c.Args()
        if len(args) < 4 || strings.ToLower(args[len(args)-2]) != "to" {
            return c.Send("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π:\n/convert <—Å—É–º–º–∞> <–∏–∑ –≤–∞–ª—é—Ç—ã> to <–≤ –≤–∞–ª—é—Ç—É>\n–ü—Ä–∏–º–µ—Ä: /convert 100 USD to EUR")
        }

        // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        amountStr := args[0]
        fromCurrency := strings.ToUpper(args[1])
        toCurrency := strings.ToUpper(args[len(args)-1])

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ —á–∏—Å–ª–æ
        amount, err := strconv.ParseFloat(amountStr, 64)
        if err != nil || amount <= 0 {
            return c.Send("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /convert 100 USD to RUB")
        }

        // –ó–∞–ø—Ä–æ—Å –∫ API
        url := fmt.Sprintf("https://api.frankfurter.app/latest?from=%s&to=%s", fromCurrency, toCurrency)
        resp, err := http.Get(url)
        if err != nil {
            return c.Send("‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤–∞–ª—é—Ç.")
        }
        defer resp.Body.Close()

        // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç API
        var exchangeResp ExchangeResponse
        if err := json.NewDecoder(resp.Body).Decode(&exchangeResp); err != nil {
            return c.Send("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω—É–∂–Ω–∞—è –≤–∞–ª—é—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ
        rate, ok := exchangeResp.Rates[toCurrency]
        if !ok {
            return c.Send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–¥—ã –≤–∞–ª—é—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD, EUR, RUB).")
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
        convertedAmount := amount * rate

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        resultMsg := fmt.Sprintf("üí∏ %.2f %s = *%.2f %s*", amount, fromCurrency, convertedAmount, toCurrency)
        return c.Send(resultMsg, telebot.ModeMarkdown)
    })

    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot.Start()
}

